<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <title>Monitor de Sensores IoT</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://bernii.github.io/gauge.js/dist/gauge.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2196F3;
            --success-color: #4CAF50;
            --error-color: #f44336;
            --background-color: #1a1a1a;
            --card-background: #2d2d2d;
            --text-color: #ffffff;
        }

        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .connection-panel {
            background-color: var(--card-background);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .connection-form {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .connection-status {
            text-align: center;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            font-weight: 500;
        }

        .status-connected {
            background-color: var(--success-color);
        }

        .status-disconnected {
            background-color: var(--error-color);
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .gauge-card {
            background-color: var(--card-background);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .chart-card {
            background-color: var(--card-background);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            height: 300px;
        }

        input {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-color);
            margin: 5px;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #1976D2;
        }

        .value-display {
            font-size: 24px;
            font-weight: 500;
            margin: 10px 0;
        }

        canvas {
            max-width: 100%;
        }

        .temp-value {
            color: #F03E3E;
        }

        .hum-value {
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Monitor de Sensores IoT</h1>
        </div>

        <div class="connection-panel">
            <div class="connection-form">
                <input type="text" id="username" placeholder="Usuario HiveMQ">
                <input type="password" id="password" placeholder="Contraseña HiveMQ">
                <button id="btnConectar">Conectar</button>
                <button id="btnDesconectar">Desconectar</button>
            </div>
            <div id="connection-status" class="connection-status status-disconnected">
                Desconectado
            </div>
        </div>

        <div class="dashboard">
            <div class="gauge-card">
                <h2>Temperatura</h2>
                <canvas id="gauge-temp"></canvas>
                <div id="temp-value" class="value-display temp-value">-- °C</div>
            </div>
            <div class="gauge-card">
                <h2>Humedad</h2>
                <canvas id="gauge-hum"></canvas>
                <div id="hum-value" class="value-display hum-value">-- %</div>
            </div>
        </div>

        <div class="charts-container">
            <div class="chart-card">
                <canvas id="temp-chart"></canvas>
            </div>
            <div class="chart-card">
                <canvas id="hum-chart"></canvas>
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        let client = null;
        let tempGauge, humGauge;
        let tempChart, humChart;
        const maxDataPoints = 20;
        const historicalData = {
            labels: [],
            temperature: [],
            humidity: []
        };

        // Función para actualizar el estado de conexión
        function updateStatus(message, isError = false) {
            const status = document.getElementById('connection-status');
            status.textContent = message;
            status.className = 'connection-status ' + (isError ? 'status-disconnected' : 'status-connected');
            console.log(message);
        }

        // Inicializar medidores
        function initGauges() {
            const tempOptions = {
                angle: 0.15,
                lineWidth: 0.44,
                radiusScale: 1,
                pointer: {
                    length: 0.6,
                    strokeWidth: 0.035,
                    color: '#ffffff'
                },
                limitMax: true,
                limitMin: true,
                colorStart: '#F03E3E',
                colorStop: '#F03E3E',
                strokeColor: '#E0E0E0',
                generateGradient: true,
                highDpiSupport: true,
                staticZones: [
                    {strokeStyle: "#30B32D", min: 0, max: 30},
                    {strokeStyle: "#FFDD00", min: 30, max: 70},
                    {strokeStyle: "#F03E3E", min: 70, max: 100}
                ],
            };

            const humOptions = {
                angle: 0.5,
                lineWidth: 0.44,
                radiusScale: 1,
                pointer: {
                    length: 0.6,
                    strokeWidth: 0.035,
                    color: '#ffffff'
                },
                limitMax: true,
                limitMin: true,
                colorStart: '#2196F3',
                colorStop: '#2196F3',
                strokeColor: '#E0E0E0',
                generateGradient: true,
                highDpiSupport: true,
                staticZones: [
                    {strokeStyle: "#2196F3", min: 0, max: 100}
                ],
            };

            tempGauge = new Gauge(document.getElementById('gauge-temp')).setOptions(tempOptions);
            humGauge = new Gauge(document.getElementById('gauge-hum')).setOptions(humOptions);

            tempGauge.maxValue = 100;
            tempGauge.setMinValue(0);
            tempGauge.set(0);

            humGauge.maxValue = 100;
            humGauge.setMinValue(0);
            humGauge.set(0);
        }

        // Inicializar gráficos
        function initCharts() {
            const commonOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#ffffff'
                        }
                    },
                    x: {
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#ffffff'
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#ffffff'
                        }
                    }
                }
            };

            tempChart = new Chart(document.getElementById('temp-chart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Temperatura (°C)',
                        borderColor: '#F03E3E',
                        data: [],
                        tension: 0.4,
                        fill: true,
                        backgroundColor: 'rgba(240, 62, 62, 0.1)'
                    }]
                },
                options: commonOptions
            });

            humChart = new Chart(document.getElementById('hum-chart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Humedad (%)',
                        borderColor: '#2196F3',
                        data: [],
                        tension: 0.4,
                        fill: true,
                        backgroundColor: 'rgba(33, 150, 243, 0.1)'
                    }]
                },
                options: commonOptions
            });
        }

        // Actualizar gráficos
        function updateCharts(type, value) {
            const now = new Date();
            const timeStr = now.toLocaleTimeString();

            if (historicalData.labels.length >= maxDataPoints) {
                historicalData.labels.shift();
                historicalData.temperature.shift();
                historicalData.humidity.shift();
            }

            if (!historicalData.labels.includes(timeStr)) {
                historicalData.labels.push(timeStr);
            }

            if (type === 'temperature') {
                historicalData.temperature.push(value);
                tempChart.data.labels = historicalData.labels;
                tempChart.data.datasets[0].data = historicalData.temperature;
                tempChart.update();
            } else {
                historicalData.humidity.push(value);
                humChart.data.labels = historicalData.labels;
                humChart.data.datasets[0].data = historicalData.humidity;
                humChart.update();
            }
        }

        // Función para conectar al broker MQTT
        function conectar() {
            if (client) {
                client.end();
            }

            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (!username || !password) {
                updateStatus('Error: Usuario y contraseña son requeridos', true);
                return;
            }

            updateStatus('Conectando...');

            try {
                client = mqtt.connect('wss://280b4923bd19408a8100f249fb7b2fdb.s1.eu.hivemq.cloud:8884/mqtt', {
                    username: username,
                    password: password,
                    clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),
                    keepalive: 60,
                    clean: true,
                    reconnectPeriod: 1000,
                    connectTimeout: 30 * 1000
                });

                client.on('connect', function() {
                    updateStatus('Conectado');
                    console.log('Conectado exitosamente a HiveMQ');

                    client.subscribe(['sensores/temperatura', 'sensores/humedad'], function(err) {
                        if (err) {
                            console.error('Error al suscribirse:', err);
                            updateStatus('Error al suscribirse: ' + err.message, true);
                        } else {
                            console.log('Suscrito a los temas de sensores');
                        }
                    });
                });

                client.on('message', function(topic, message) {
                    console.log('Mensaje recibido en', topic + ':', message.toString());
                    const value = parseFloat(message.toString());
                    
                    if (isNaN(value)) {
                        console.error('Valor no numérico recibido:', message.toString());
                        return;
                    }

                    if (topic === 'sensores/temperatura') {
                        tempGauge.set(value);
                        document.getElementById('temp-value').textContent = value.toFixed(1) + ' °C';
                        updateCharts('temperature', value);
                    } else if (topic === 'sensores/humedad') {
                        humGauge.set(value);
                        document.getElementById('hum-value').textContent = value.toFixed(1) + ' %';
                        updateCharts('humidity', value);
                    }
                });

                client.on('error', function(error) {
                    console.error('Error MQTT:', error);
                    updateStatus('Error: ' + error.message, true);
                });

                client.on('close', function() {
                    console.log('Conexión cerrada');
                    updateStatus('Desconectado', true);
                });

                client.on('offline', function() {
                    console.log('Cliente desconectado');
                    updateStatus('Desconectado - Intentando reconectar...', true);
                });

                client.on('reconnect', function() {
                    console.log('Intentando reconexión...');
                    updateStatus('Reconectando...', true);
                });

            } catch (error) {
                console.error('Error al conectar:', error);
                updateStatus('Error al conectar: ' + error.message, true);
            }
        }

        // Función para desconectar
        function desconectar() {
            if (client) {
                client.end();
                updateStatus('Desconectado', true);
                console.log('Desconectado manualmente');
            }
        }

        // Inicializar todo cuando carga la página
        document.addEventListener('DOMContentLoaded', function() {
            initGauges();
            initCharts();
            
            // Agregar event listeners a los botones
            document.getElementById('btnConectar').addEventListener('click', conectar);
            document.getElementById('btnDesconectar').addEventListener('click', desconectar);
        });
    </script>
</body>
</html>
