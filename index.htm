<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitor de Sensores IoT</title>
    <!-- Cambiamos a la biblioteca MQTT.js en lugar de Paho -->
    <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gauge.js/1.3.7/gauge.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* [Mantener los mismos estilos que antes] */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #121212;
            color: #e0e0e0;
        }
        /* ... [resto de estilos] ... */
    </style>
</head>
<body>
    <h1>Monitor de Sensores IoT</h1>

    <div class="settings">
        <div>
            <label for="username">Usuario:</label>
            <input type="text" id="username" value="tu_usuario">
            <label for="password">Contrase√±a:</label>
            <input type="password" id="password" value="tu_contrase√±a">
        </div>
        <div>
            <label for="tempTopic">Tema Temperatura:</label>
            <input type="text" id="tempTopic" value="sensores/temperatura">
            <label for="humTopic">Tema Humedad:</label>
            <input type="text" id="humTopic" value="sensores/humedad">
        </div>
        <div>
            <button id="connectBtn" onclick="connectMQTT()">
                <i class="fas fa-plug"></i> Conectar
            </button>
            <button id="disconnectBtn" onclick="disconnectMQTT()">
                <i class="fas fa-power-off"></i> Desconectar
            </button>
        </div>
    </div>

    <div id="connectionStatus" class="connection-status disconnected">
        Desconectado
    </div>

    <!-- [Mantener el resto del HTML igual] -->

    <script>
        // Variables globales
        let client = null;
        let temperatureGaugeChart;
        let humidityGaugeChart;
        let temperatureLineChart;
        let humidityLineChart;
        let temperatureHistory = [];
        let humidityHistory = [];
        const maxDataPoints = 30;
        let isConnected = false;

        function logDebug(message, type = 'info') {
            console.log(message);
            const debugPanel = document.getElementById('debugPanel');
            const timestamp = new Date().toLocaleTimeString();
            let prefix = '';
            switch(type) {
                case 'mqtt': prefix = 'üîµ MQTT'; break;
                case 'error': prefix = 'üî¥ ERROR'; break;
                case 'success': prefix = '‚úÖ OK'; break;
                default: prefix = '‚ÑπÔ∏è INFO';
            }
            debugPanel.innerHTML = `[${timestamp}] ${prefix}: ${message}<br>` + debugPanel.innerHTML;
        }

        function connectMQTT() {
            if (client) {
                client.end();
            }

            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            // Configuraci√≥n para HiveMQ Cloud
            const options = {
                protocol: 'wss',
                hostname: '280b4923bd19408a8100f249fb7b2fdb.s1.eu.hivemq.cloud',
                port: 8884,
                path: '/mqtt',
                username: username,
                password: password,
                clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)
            };

            try {
                logDebug('Intentando conectar...', 'mqtt');
                
                // Crear URL de conexi√≥n
                const url = `wss://${options.hostname}:${options.port}${options.path}`;
                
                // Conectar usando MQTT.js
                client = mqtt.connect(url, options);

                client.on('connect', function() {
                    isConnected = true;
                    logDebug('¬°Conexi√≥n exitosa!', 'success');
                    document.getElementById('connectionStatus').className = 'connection-status connected';
                    document.getElementById('connectionStatus').textContent = 'Conectado';

                    // Suscribirse a los temas
                    const tempTopic = document.getElementById('tempTopic').value;
                    const humTopic = document.getElementById('humTopic').value;
                    
                    client.subscribe([tempTopic, humTopic], function(err) {
                        if (!err) {
                            logDebug(`Suscrito a ${tempTopic} y ${humTopic}`, 'success');
                        }
                    });
                });

                client.on('message', function(topic, message) {
                    const payload = message.toString();
                    logDebug(`Mensaje recibido en tema "${topic}": ${payload}`, 'mqtt');

                    try {
                        const value = parseFloat(payload);
                        if (!isNaN(value)) {
                            if (topic === document.getElementById('tempTopic').value) {
                                updateGauge('temperature', value);
                            } else if (topic === document.getElementById('humTopic').value) {
                                updateGauge('humidity', value);
                            }
                        }
                    } catch (e) {
                        logDebug(`Error al procesar mensaje: ${e.message}`, 'error');
                    }
                });

                client.on('error', function(error) {
                    logDebug('Error de conexi√≥n: ' + error.message, 'error');
                    document.getElementById('connectionStatus').className = 'connection-status disconnected';
                    document.getElementById('connectionStatus').textContent = 'Error: ' + error.message;
                });

                client.on('close', function() {
                    isConnected = false;
                    logDebug('Conexi√≥n cerrada', 'info');
                    document.getElementById('connectionStatus').className = 'connection-status disconnected';
                    document.getElementById('connectionStatus').textContent = 'Desconectado';
                });

            } catch (e) {
                logDebug('Error al inicializar cliente MQTT: ' + e.message, 'error');
            }
        }

        function disconnectMQTT() {
            if (client) {
                client.end();
                isConnected = false;
                logDebug('Desconectado manualmente', 'info');
                document.getElementById('connectionStatus').className = 'connection-status disconnected';
                document.getElementById('connectionStatus').textContent = 'Desconectado manualmente';
            }
        }

        // [Mantener el resto de las funciones igual]

        // Inicializaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            // [Mantener la inicializaci√≥n de los gr√°ficos igual]
            logDebug("Aplicaci√≥n inicializada. Pulse 'Conectar' para iniciar la conexi√≥n MQTT.");
        });
    </script>
</body>
</html>
