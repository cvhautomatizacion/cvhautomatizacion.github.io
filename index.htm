<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitor Avanzado de Sensores</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gauge.js/1.3.7/gauge.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* ... [Mantenemos los estilos anteriores] ... */
        .alert-settings {
            background-color: #1e1e1e;
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
        }
        .alert {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            display: none;
        }
        .alert-warning {
            background-color: #ffc107;
            color: #000;
        }
        .alert-danger {
            background-color: #dc3545;
            color: #fff;
        }
        .export-btn {
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px;
        }
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }
        .stat-card {
            background-color: #2d2d2d;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .battery-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 5px;
            background-color: #28a745;
            color: white;
        }
    </style>
</head>
<body>
    <h1>Monitor Avanzado de Sensores en Tiempo Real</h1>

    <div class="settings">
        <!-- ... [Configuración MQTT existente] ... -->
        <div class="alert-settings">
            <h3>Configuración de Alertas</h3>
            <div>
                <label>Temperatura Mínima:</label>
                <input type="number" id="tempMin" value="10" step="0.1">
                <label>Temperatura Máxima:</label>
                <input type="number" id="tempMax" value="35" step="0.1">
            </div>
            <div>
                <label>Humedad Mínima:</label>
                <input type="number" id="humMin" value="30" step="0.1">
                <label>Humedad Máxima:</label>
                <input type="number" id="humMax" value="70" step="0.1">
            </div>
        </div>
    </div>

    <div class="stats-container">
        <div class="stat-card">
            <h3>Promedio Temperatura</h3>
            <div id="avgTemp">0.00 °C</div>
        </div>
        <div class="stat-card">
            <h3>Promedio Humedad</h3>
            <div id="avgHum">0.00 %</div>
        </div>
        <div class="stat-card">
            <h3>Calidad de Señal</h3>
            <div id="signalQuality">Excelente</div>
        </div>
        <div class="stat-card">
            <h3>Tiempo Activo</h3>
            <div id="uptime">0:00:00</div>
        </div>
    </div>

    <div id="alerts">
        <div id="tempAlert" class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            <span class="alert-text"></span>
        </div>
        <div id="humAlert" class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            <span class="alert-text"></span>
        </div>
    </div>

    <button class="export-btn" onclick="exportData()">
        <i class="fas fa-download"></i> Exportar Datos
    </button>

    <!-- ... [Resto del HTML existente] ... -->

    <script>
        // ... [Variables globales existentes] ...
        let sensorData = {
            temperature: [],
            humidity: [],
            timestamp: []
        };
        let startTime = Date.now();

        function updateStatistics() {
            // Calcular promedios
            if (sensorData.temperature.length > 0) {
                const avgTemp = sensorData.temperature.reduce((a, b) => a + b) / sensorData.temperature.length;
                document.getElementById('avgTemp').textContent = avgTemp.toFixed(2) + ' °C';
            }
            if (sensorData.humidity.length > 0) {
                const avgHum = sensorData.humidity.reduce((a, b) => a + b) / sensorData.humidity.length;
                document.getElementById('avgHum').textContent = avgHum.toFixed(2) + ' %';
            }

            // Actualizar tiempo activo
            const uptime = Math.floor((Date.now() - startTime) / 1000);
            const hours = Math.floor(uptime / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            const seconds = uptime % 60;
            document.getElementById('uptime').textContent = 
                `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function checkAlerts(type, value) {
            const alertElement = document.getElementById(type + 'Alert');
            const alertText = alertElement.querySelector('.alert-text');
            
            if (type === 'temp') {
                const min = parseFloat(document.getElementById('tempMin').value);
                const max = parseFloat(document.getElementById('tempMax').value);
                
                if (value < min) {
                    alertText.textContent = `¡Temperatura baja! (${value.toFixed(2)}°C)`;
                    alertElement.style.display = 'block';
                } else if (value > max) {
                    alertText.textContent = `¡Temperatura alta! (${value.toFixed(2)}°C)`;
                    alertElement.style.display = 'block';
                } else {
                    alertElement.style.display = 'none';
                }
            } else if (type === 'hum') {
                const min = parseFloat(document.getElementById('humMin').value);
                const max = parseFloat(document.getElementById('humMax').value);
                
                if (value < min) {
                    alertText.textContent = `¡Humedad baja! (${value.toFixed(2)}%)`;
                    alertElement.style.display = 'block';
                } else if (value > max) {
                    alertText.textContent = `¡Humedad alta! (${value.toFixed(2)}%)`;
                    alertElement.style.display = 'block';
                } else {
                    alertElement.style.display = 'none';
                }
            }
        }

        function exportData() {
            const wb = XLSX.utils.book_new();
            const data = sensorData.timestamp.map((time, index) => ({
                Timestamp: new Date(time).toLocaleString(),
                Temperatura: sensorData.temperature[index],
                Humedad: sensorData.humidity[index]
            }));
            
            const ws = XLSX.utils.json_to_sheet(data);
            XLSX.utils.book_append_sheet(wb, ws, "Datos Sensores");
            
            const fileName = `datos_sensores_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(wb, fileName);
        }

        // Modificar la función updateGauge existente
        function updateGauge(type, value) {
            if (type === 'temperature') {
                temperatureGaugeChart.set(value);
                document.getElementById('temperatureValue').textContent = value.toFixed(2) + ' °C';
                sensorData.temperature.push(value);
                checkAlerts('temp', value);
            } else if (type === 'humidity') {
                humidityGaugeChart.set(value);
                document.getElementById('humidityValue').textContent = value.toFixed(2) + ' %';
                sensorData.humidity.push(value);
                checkAlerts('hum', value);
            }
            sensorData.timestamp.push(Date.now());
            updateStatistics();
        }

        // ... [Resto del código JavaScript existente] ...

        // Inicialización adicional
        setInterval(updateStatistics, 1000); // Actualizar estadísticas cada segundo
    </script>
</body>
</html>
